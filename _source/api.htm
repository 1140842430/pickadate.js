

{% dateDemoField = function( props ) {
    props = props || {}
    return '<fieldset class="fieldset fieldset--demo js__fieldset">' +
        ( props.pre || '' ) +
        '<input id="' + ( props.id || '' ) + '" class="fieldset__input ' + ( props.klass || '' ) + '" type=text value="' + ( props.value || '' ) + '" placeholder="Open your console and try me&hellip;">' +
    '</fieldset>'
} %}

{% today = new Date(2013,3,20); today.setHours(0,0,0,0) %}
{% nowDate = new Date(); now = nowDate.getHours() * 60 + nowDate.getMinutes(); now = now - now%30 %}
{% playDate = new Date( today.getFullYear(), today.getMonth(), today.getDate() + 10 ) %}


<section class="section">

    <div class="section__block section__block--scoped">

        <h1 class="heading heading--divide-center heading--divide-first"><span class="heading__text">the picker api<a class="heading__anchor" name="picker" href="#picker">&sect;</a></span></h1>

        <p>The picker can be played with in a couple ways to extend the functionality.</p>

        <p><b>1)</b> Within scope of the <a href="#events">events</a> passed as options:</p>

        <pre><code data-language="javascript">$('.datepicker').pickadate({
    onStart: function() {
        var picker = this
    }
})</code></pre>

        <p><b>2)</b> Within any scope:</p>

        <pre><code data-language="javascript">var $input = $('.datepicker').pickadate()
var picker = $input.pickadate('picker')</code></pre>

        <div class="section__block section__block--notification">
            <p>For all API examples on this page, the date picker is used, but the same API applies to the time picker as well.</p>
        </div>

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">events<a class="heading__anchor" name="events" href="#events">&sect;</a></span></h1>

        <p>There are <i>six</i> events available in the options:</p>

        <ol>
            <li><code class="function"><a href="#event-onOpen">onOpen</a></code></li>
            <li><code class="function"><a href="#event-onClose">onClose</a></code></li>
            <li><code class="function"><a href="#event-onStart">onStart</a></code></li>
            <li><code class="function"><a href="#event-onStop">onStop</a></code></li>
            <li><code class="function"><a href="#event-onRender">onRender</a></code></li>
            <li><code class="function"><a href="#event-onSet">onSet</a></code></li>
        </ol>

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">methods<a class="heading__anchor" name="methods" href="#methods">&sect;</a></span></h1>

        <p>There are <i>eight</i> methods available on the picker:</p>

        <ol>
            <li><code class="function"><a href="#open-close">open</a></code></li>
            <li><code class="function"><a href="#open-close">close</a></code></li>
            <li><code class="function"><a href="#start-stop">start</a></code></li>
            <li><code class="function"><a href="#start-stop">stop</a></code></li>
            <li><code class="function"><a href="#render">render</a></code></li>
            <li><code class="function"><a href="#clear">clear</a></code></li>
            <li><code class="function"><a href="#get">get</a></code></li>
            <li><code class="function"><a href="#set">set</a></code></li>
        </ol>

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">objects<a class="heading__anchor" name="objects" href="#objects">&sect;</a></span></h1>

        <p>There are <i>four</i> objects available through the picker:</p>

        <ol>
            <li><code><a href="#object-$node">$node</a></code></li>
            <li><code><a href="#object-$holder">$holder</a></code></li>
            <li><code><a href="#object-_hidden">_hidden</a></code></li>
            <li><code><a href="#object-component">component</a></code></li>
        </ol>

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">open and close<a class="heading__anchor" name="open-close" href="#open-close">&sect;</a></span></h2>
        <p>Open and close the picker holder. To check if it’s already open, use <a href="#get">the <code class="function">get</code> method</a>.</p>

        <pre class="pre--demo"><code data-language="javascript">picker.open()
picker.close()

// If a “click” is involved, prevent the event bubbling.
event.stopPropagation()</code></pre>

        {%= dateDemoField({ id: 'demo__api-open-close', pre: '<button id=button__api-open-close class="fieldset__button button button--small">Open</button>' }) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">start and stop<a class="heading__anchor" name="start-stop" href="#start-stop">&sect;</a></span></h2>
        <p>Destroy and rebuild the picker.</p>

        <pre class="pre--demo"><code data-language="javascript">picker.start()
picker.stop()</code></pre>

        {%= dateDemoField({ id: 'demo__api-start-stop', pre: '<button id=button__api-start-stop class="fieldset__button button button--small">Stop</button>' }).replace( 'type=text', 'type=date' ) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">render<a class="heading__anchor" name="render" href="#render">&sect;</a></span></h2>
        <p>Refresh the picker after adding something to the holder.</p>

        <pre class="pre--demo"><code data-language="javascript">picker.render()</code></pre>

        {%= dateDemoField({ id: 'demo__api-render', pre: '<button id=button__api-render class="fieldset__button button button--small">Add stuff</button>' }) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">clear<a class="heading__anchor" name="clear" href="#clear">&sect;</a></span></h2>
        <p>Clear the value in the picker’s <code class="tag-name">input</code> element.</p>

        <pre class="pre--demo"><code data-language="javascript">picker.clear()</code></pre>

        {%= dateDemoField({
            id: 'demo__api-clear',
            pre: '<button id=button__api-clear class="fieldset__button button button--small">Clear</button>',
            value: grunt.template.date('d mmmm, yyyy')
        }) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get<a class="heading__anchor" name="get" href="#get">&sect;</a></span></h2>

        <p>Get the properties, objects, and states that make up the current state of the picker.</p>

        <pre><code data-language="javascript">picker.get(thing)</code></pre>

        <p>The <code>thing</code> argument is an optional string and can be one of the following:</p>

        <ul>
            <li><code><a href="#get-value">value</a></code> (default)</li>
            <li><code><a href="#get-select">select</a></code> <b>*</b></li>
            <li><code><a href="#get-highlight">highlight</a></code> <b>*</b></li>
            <li><code><a href="#get-view">view</a></code> <b>*</b></li>
            <li><code><a href="#get-min">min</a></code> <b>*</b></li>
            <li><code><a href="#get-max">max</a></code> <b>*</b></li>
            <li><code><a href="#get-open">open</a></code></li>
            <li><code><a href="#get-id">id</a></code></li>
            <li><code><a href="#get-disable">disable</a></code></li>
            <li><code><a href="#get-enable">enable</a></code></li>
        </ul>

        <h3 class="heading heading--divide"><span class="heading__text"><b>*</b> item objects<a class="heading__anchor--bigger" name="item-objects" href="#item-objects">&sect;</a></span></h3>

        <p>The <code>thing</code>s denoted in the list above with an asterisk (<b>*</b>) return a picker item object that can be formatted by passing a second string argument using the <a href="date.htm#formats">date</a> or <a href="time.htm#formats">time</a> formatting rules:</p>
        <pre><code data-language="javascript">picker.get(thing, format)</code></pre>

        <p>Each “date” or “time” within the picker has an item object accompanying it behind the scenes.</p>

        <p>Here’s a <b>date picker item object</b> for <u>{%= grunt.template.date('d mmmm, yyyy') %}</u>:</p>
        <pre><code data-language="javascript">{
    // The full year.
    year: {%= today.getFullYear() %},

    // The month with zero-as-index.
    month: {%= today.getMonth() %},

    // The date of the month.
    date: {%= today.getDate() %},

    // The day of the week with zero-as-index.
    day: {%= today.getDay() %},

    // The underlying JavaScript Date object.
    obj: { '{%= today %}' },

    // The “pick” value used for comparisons.
    pick: {%= today.getTime() %}
}</code></pre>

        <p>Here’s a <b>time picker item object</b> for <u>{%= grunt.template.date('h:MM TT') %}</u>:</p>
        <pre><code data-language="javascript">{
    // Hour of the day from 0 to 23.
    hour: {%= ~~(now/60) %},

    // The minutes of the hour from 0 to 59 (based on the interval).
    mins: {%= 30 + (now/60%1) * 60 %},

    // The “pick” value used for comparisons.
    pick: {%= 30 + now %}
}</code></pre>

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">value</code><a class="heading__anchor" name="get-value" href="#get-value">&sect;</a></span></h2>

        <p>Returns the string value of the picker’s <code>input</code> element.</p>

        <pre class="pre--demo"><code data-language="javascript">picker.get() // Short for `picker.get('value')`.</code></pre>

        {%= dateDemoField({
            id: 'demo__api-get--value',
            pre: '<button id=button__api-get--value class="fieldset__button button button--small">Log the value</button>',
            value: grunt.template.date('d mmmm, yyyy')
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">select</code><a class="heading__anchor" name="get-select" href="#get-select">&sect;</a></span></h2>

        <p>Returns the <a href="#item-objects">item object</a> that is visually selected.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('select')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--select',
            pre: '<button id=button__api-get--select class="fieldset__button button button--small">Log the select</button>'
        }) %}

        <p>Returns a formatted string for the <a href="#item-objects">item object</a> that is visually selected.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('select', 'yyyy/mm/dd')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--select-format',
            pre: '<button id=button__api-get--select-format class="fieldset__button button button--small">Log the select formatted</button>'
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">highlight</code><a class="heading__anchor" name="get-highlight" href="#get-highlight">&sect;</a></span></h2>

        <p>Returns the <a href="#item-objects">item object</a> that is visually highlighted.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('highlight')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--highlight',
            pre: '<button id=button__api-get--highlight class="fieldset__button button button--small">Log the highlight</button>'
        }) %}

        <p>Returns a formatted string for the <a href="#item-objects">item object</a> that is visually highlighted.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('highlight', 'yyyy/mm/dd')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--highlight-format',
            pre: '<button id=button__api-get--highlight-format class="fieldset__button button button--small">Log the highlight formatted</button>'
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">view</code><a class="heading__anchor" name="get-view" href="#get-view">&sect;</a></span></h2>

        <p>Returns the <a href="#item-objects">item object</a> that sets the current view.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('view')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--view',
            pre: '<button id=button__api-get--view class="fieldset__button button button--small">Log the view</button>'
        }) %}

        <p>Returns a formatted string for the <a href="#item-objects">item object</a> that sets the current view.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('view', 'yyyy/mm/dd')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--view-format',
            pre: '<button id=button__api-get--view-format class="fieldset__button button button--small">Log the view formatted</button>'
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">min</code><a class="heading__anchor" name="get-min" href="#get-min">&sect;</a></span></h2>

        <p>Returns the <a href="#item-objects">item object</a> that limits the picker’s lower range.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('min')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--min',
            pre: '<button id=button__api-get--min class="fieldset__button button button--small">Log the min</button>'
        }) %}

        <p>Returns a formatted string for the <a href="#item-objects">item object</a> that limits the picker’s lower range.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('min', 'yyyy/mm/dd')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--min-format',
            pre: '<button id=button__api-get--min-format class="fieldset__button button button--small">Log the min formatted</button>'
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">max</code><a class="heading__anchor" name="get-max" href="#get-max">&sect;</a></span></h2>

        <p>Returns the <a href="#item-objects">item object</a> that limits the picker’s upper range.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('max')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--max',
            pre: '<button id=button__api-get--max class="fieldset__button button button--small">Log the max</button>'
        }) %}

        <p>Returns a formatted string for the <a href="#item-objects">item object</a> that limits the picker’s upper range.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('max', 'yyyy/mm/dd')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--max-format',
            pre: '<button id=button__api-get--max-format class="fieldset__button button button--small">Log the max formatted</button>'
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">open</code><a class="heading__anchor" name="get-open" href="#get-open">&sect;</a></span></h2>

        <p>Returns a boolean value of whether the picker is open or not.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('open')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--open',
            pre: '<button id=button__api-get--open class="fieldset__button button button--small">Log the open state</button>'
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">id</code><a class="heading__anchor" name="get-id" href="#get-id">&sect;</a></span></h2>

        <p>Returns a unique 9-digit integer that is the ID of the picker.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('id')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--id',
            pre: '<button id=button__api-get--id class="fieldset__button button button--small">Log the picker ID</button>'
        }) %}

    </div> <!-- .section__block -->

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">get <code class="string">disable</code><a class="heading__anchor" name="get-disable" href="#get-disable">&sect;</a></span></h2>

        <p>Returns an array of items that determine which <a href="#item-objects">item objects</a> to disable on the picker.</p>
        <pre class="pre--demo"><code data-language="javascript">picker.get('disable')</code></pre>
        {%= dateDemoField({
            id: 'demo__api-get--disable',
            pre: '<button id=button__api-get--disable class="fieldset__button button button--small">Log the disabled collection</button>'
        }) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">set<a class="heading__anchor" name="set" href="#set">&sect;</a></span></h2>

        <p>Set the properties, objects, and states to change the state of the picker.</p>

        <pre><code data-language="javascript">picker.set(thing, value)</code></pre>

        <p>Both <code>thing</code> and <code>value</code> are required arguments. The <code>value</code>, is based on type of <code>thing</code> being set. The <code>thing</code>, is a string that can be:</p>

        <ul>
            <li><code><a href="#set-select">select</a></code> <b>*</b></li>
            <li><code><a href="#set-highlight">highlight</a></code> <b>*</b></li>
            <li><code><a href="#set-view">view</a></code></li>
            <li><code><a href="#set-min">min</a></code> <b>*</b></li>
            <li><code><a href="#set-max">max</a></code> <b>*</b></li>
            <li><code><a href="#set-open">open</a></code></li>
            <li><code><a href="#set-disable">disable</a></code> <b>*</b></li>
            <li><code><a href="#set-enable">enable</a></code> <b>*</b></li>
            <li><code><a href="#set-interval">interval</a></code> (time picker only) <b>*</b></li>
        </ul>

        <p>An alternate syntax can be used to set multiple things at once:</p>

        <pre><code data-language="javascript">picker.set({
    thing: value,
    thing: value,
    thing: value
})</code></pre>

        <h3 class="heading heading--divide"><span class="heading__text"><b>*</b> cascading changes<a class="heading__anchor--bigger" name="cascading-changes" href="#cascading-changes">&sect;</a></span></h3>

        <p>When the <code>thing</code>s denoted in the list above with an asterisk (<b>*</b>) are set, they cascade into updating other things using the same value.</p>

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">set <code class="string">select</code><a class="heading__anchor" name="set-select" href="#set-select">&sect;</a></span></h2>
        <p>Setting <code class="string">select</code> has a <a href="#cascading-changes">cascading change</a> that updates the value of the <code class="tag-name">input</code> element based on the settings <code>format</code>.</p>

        <h3 class="heading heading--divide"><span class="heading__text">Select a date <a href="#item-objects">item object</a><a class="heading__anchor--bigger" name="set-select-date" href="#set-select-date">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [YEAR,MONTH,DATE].
picker.set('select', [{%= today.getFullYear() + ',' + today.getMonth() + ',' + today.getDate() %}])

// Using JavaScript Date objects.
picker.set('select', { '{%= playDate %}' })

// Using positive integers as UNIX timestamps.
picker.set('select', {%= today.getTime() - 468487654 %})</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--select-date',
            pre: '<button id=button__api-set--select-date-array class="fieldset__button button button--small">Select using an array</button>' +
                '<button id=button__api-set--select-date-js class="fieldset__button button button--small">Select using a JS Date</button>' +
                '<button id=button__api-set--select-date-integer class="fieldset__button button button--small">Select using an integer</button>'
        }).replace( 'Open your console and t', 'T' ) %}

        <h3 class="heading heading--divide"><span class="heading__text">Select a time <a href="#item-objects">item object</a><a class="heading__anchor--bigger" name="set-select-time" href="#set-select-time">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [HOUR,MINUTE].
picker.set('select', [3,0])

// Using positive integers as minutes.
picker.set('select', 540)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--select-time',
            pre: '<button id=button__api-set--select-time-array class="fieldset__button button button--small">Select using an array</button>' +
                '<button id=button__api-set--select-time-integer class="fieldset__button button button--small">Select using an integer</button>'
        }).replace( 'Open your console and t', 'T' ) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">set <code class="string">highlight</code><a class="heading__anchor" name="set-highlight" href="#set-highlight">&sect;</a></span></h2>
        <p>Setting <code class="string">highlight</code> has a <a href="#cascading-changes">cascading change</a> that updates the <a href="#item-objects">item object</a> that sets the <code>view</code> of the picker.</p>

        <h3 class="heading heading--divide"><span class="heading__text">Highlight a date <a href="#item-objects">item object</a><a class="heading__anchor--bigger" name="set-highlight-date" href="#set-highlight-date">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [YEAR,MONTH,DATE].
picker.set('highlight', [{%= today.getFullYear() + ',' + today.getMonth() + ',' + today.getDate() %}])

// Using JavaScript Date objects.
picker.set('highlight', { '{%= playDate %}' })

// Using positive integers as UNIX timestamps.
picker.set('highlight', {%= today.getTime() - 468487654 %})</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--highlight-date',
            pre: '<button id=button__api-set--highlight-date-array class="fieldset__button button button--small">Highlight using an array</button>' +
                '<button id=button__api-set--highlight-date-js class="fieldset__button button button--small">Highlight using a JS Date</button>' +
                '<button id=button__api-set--highlight-date-integer class="fieldset__button button button--small">Highlight using an integer</button>'
        }).replace( 'Open your console and t', 'T' ) %}

        <h3 class="heading heading--divide"><span class="heading__text">Highlight a time <a href="#item-objects">item object</a><a class="heading__anchor--bigger" name="set-highlight-time" href="#set-highlight-time">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [HOUR,MINUTE].
picker.set('highlight', [15,30])

// Using positive integers as minutes.
picker.set('highlight', 1080)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--highlight-time',
            pre: '<button id=button__api-set--highlight-time-array class="fieldset__button button button--small">Highlight using an array</button>' +
                '<button id=button__api-set--highlight-time-integer class="fieldset__button button button--small">Highlight using an integer</button>'
        }).replace( 'Open your console and t', 'T' ) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">set <code class="string">view</code><a class="heading__anchor" name="set-view" href="#set-view">&sect;</a></span></h2>
        <p>Setting <code class="string">view</code> has no <a href="#cascading-changes">cascading changes</a> and the <code class="string">highlight</code> remains unaffected.</p>

        <h3 class="heading heading--divide"><span class="heading__text">Viewset a date <a href="#item-objects">item object</a><a class="heading__anchor--bigger" name="set-view-date" href="#set-view-date">&sect;</a></span></h3>

        <p>The <code>value</code> passed gets normalized to the first date of the month to bring into view.</p>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [YEAR,MONTH,DATE].
picker.set('view', [2000,3,20])

// Using JavaScript Date objects.
picker.set('view', { '{%= new Date(1988,7,14) %}' })

// Using positive integers as UNIX timestamps.
picker.set('view', 1587355200000)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--view-date',
            pre: '<button id=button__api-set--view-date-array class="fieldset__button button button--small">Viewset using an array</button>' +
                '<button id=button__api-set--view-date-js class="fieldset__button button button--small">Viewset using a JS Date</button>' +
                '<button id=button__api-set--view-date-integer class="fieldset__button button button--small">Viewset using an integer</button>'
        }).replace( 'Open your console and t', 'T' ) %}

        <h3 class="heading heading--divide"><span class="heading__text">Viewset a time <a href="#item-objects">item object</a><a class="heading__anchor--bigger" name="set-view-time" href="#set-view-time">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [HOUR,MINUTE].
picker.set('view', [15,30])

// Using positive integers as minutes.
picker.set('view', 1080)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--view-time',
            pre: '<button id=button__api-set--view-time-array class="fieldset__button button button--small">Viewset using an array</button>' +
                '<button id=button__api-set--view-time-integer class="fieldset__button button button--small">Viewset using an integer</button>'
        }).replace( 'Open your console and t', 'T' ) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">set <code class="string">min</code><a class="heading__anchor" name="set-min" href="#set-min">&sect;</a></span></h2>
        <p>Setting <code class="string">min</code> has <a href="#cascading-changes">cascading changes</a> on the <code class="string">select</code>, <code class="string">highlight</code>, and <code class="string">view</code> only when the particular <a href="#item-objects">item object</a> goes out of range.</p>

        <h3 class="heading heading--divide"><span class="heading__text">Scope the date <a href="#item-objects">item objects</a><a class="heading__anchor--bigger" name="set-min-date" href="#set-min-date">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [YEAR,MONTH,DATE].
picker.set('min', [2013,3,20])

// Using JavaScript Date objects.
picker.set('min', { '{%= new Date(2013,7,14) %}' })

// Using integers as days relative to today.
picker.set('min', -4)

// Using `true` for “today”.
picker.set('min', true)

// Using `false` to remove.
picker.set('min', false)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--min-date',
            pre: '<button id=button__api-set--min-date-array class="fieldset__button button button--small">Scope using an array</button>' +
                '<button id=button__api-set--min-date-js class="fieldset__button button button--small">Scope using a JS Date</button>' +
                '<button id=button__api-set--min-date-integer class="fieldset__button button button--small">Scope using an integer</button>' +
                '<button id=button__api-set--min-date-true class="fieldset__button button button--small">Scope using `true`</button>' +
                '<button id=button__api-set--min-date-false class="fieldset__button button button--small">Scope using `false`</button>'
        }).replace( 'Open your console and t', 'T' ) %}

        <h3 class="heading heading--divide"><span class="heading__text">Scope the time <a href="#item-objects">item objects</a><a class="heading__anchor--bigger" name="set-min-time" href="#set-min-time">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [HOUR,MINUTE].
picker.set('min', [15,30])

// Using integers as intervals relative from now.
picker.set('min', -4)

// Using `true` for “now”.
picker.set('min', true)

// Using `false` to remove.
picker.set('min', false)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--min-time',
            pre: '<button id=button__api-set--min-time-array class="fieldset__button button button--small">Scope using an array</button>' +
                '<button id=button__api-set--min-time-integer class="fieldset__button button button--small">Scope using an integer</button>' +
                '<button id=button__api-set--min-time-true class="fieldset__button button button--small">Scope using `true`</button>' +
                '<button id=button__api-set--min-time-false class="fieldset__button button button--small">Scope using `false`</button>'
        }).replace( 'Open your console and t', 'T' ) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->


<section class="section">

    <div class="section__block section__block--scoped">

        <h2 class="heading heading--divide"><span class="heading__text">set <code class="string">max</code><a class="heading__anchor" name="set-max" href="#set-max">&sect;</a></span></h2>
        <p>Setting <code class="string">max</code> has <a href="#cascading-changes">cascading changes</a> on the <code class="string">select</code>, <code class="string">highlight</code>, and <code class="string">view</code> only when the particular <a href="#item-objects">item object</a> goes out of range.</p>

        <h3 class="heading heading--divide"><span class="heading__text">Scope the date <a href="#item-objects">item objects</a><a class="heading__anchor--bigger" name="set-max-date" href="#set-max-date">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [YEAR,MONTH,DATE].
picker.set('max', [2013,3,20])

// Using JavaScript Date objects.
picker.set('max', { '{%= new Date(2013,7,14) %}' })

// Using integers as days relative to today.
picker.set('max', 4)

// Using `true` for “today”.
picker.set('max', true)

// Using `false` to remove.
picker.set('max', false)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--max-date',
            pre: '<button id=button__api-set--max-date-array class="fieldset__button button button--small">Scope using an array</button>' +
                '<button id=button__api-set--max-date-js class="fieldset__button button button--small">Scope using a JS Date</button>' +
                '<button id=button__api-set--max-date-integer class="fieldset__button button button--small">Scope using an integer</button>' +
                '<button id=button__api-set--max-date-true class="fieldset__button button button--small">Scope using `true`</button>' +
                '<button id=button__api-set--max-date-false class="fieldset__button button button--small">Scope using `false`</button>'
        }).replace( 'Open your console and t', 'T' ) %}

        <h3 class="heading heading--divide"><span class="heading__text">Scope the time <a href="#item-objects">item objects</a><a class="heading__anchor--bigger" name="set-max-time" href="#set-max-time">&sect;</a></span></h3>

        <pre class="pre--demo"><code data-language="javascript">// Using arrays formatted as [HOUR,MINUTE].
picker.set('max', [15,30])

// Using integers as intervals relative from now.
picker.set('max', 4)

// Using `true` for “now”.
picker.set('max', true)

// Using `false` to remove.
picker.set('max', false)</code></pre>

        {%= dateDemoField({
            id: 'demo__api-set--max-time',
            pre: '<button id=button__api-set--max-time-array class="fieldset__button button button--small">Scope using an array</button>' +
                '<button id=button__api-set--max-time-integer class="fieldset__button button button--small">Scope using an integer</button>' +
                '<button id=button__api-set--max-time-true class="fieldset__button button button--small">Scope using `true`</button>' +
                '<button id=button__api-set--max-time-false class="fieldset__button button button--small">Scope using `false`</button>'
        }).replace( 'Open your console and t', 'T' ) %}

    </div> <!-- .section__block -->

</section> <!-- .section -->



